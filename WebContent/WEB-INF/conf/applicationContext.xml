<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:p="http://www.springframework.org/schema/p"  
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:jee="http://www.springframework.org/schema/jee" 
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tool="http://www.springframework.org/schema/tool"
	xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
	xsi:schemaLocation=" 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
	http://www.springframework.org/schema/tool http://www.springframework.org/schema/tool/spring-tool-3.1.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.1.xsd 
	http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring   
	http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd  "
	>
	<bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor" />
	
	<!-- 支持 @AspectJ 标记-->
	<!--<aop:aspectj-autoproxy proxy-target-class="true"/>-->
	<aop:aspectj-autoproxy expose-proxy="true"/>
	
	<context:component-scan base-package="/">  
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>  
	</context:component-scan>
	
	<bean id="dataSources"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName">
			<value>org.logicalcobwebs.proxool.ProxoolDriver</value>
		</property>
		<property name="url">
			<value>proxool.smart</value>
		</property>
	</bean>
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSources" />
	</bean>
	<bean id="namedParameterJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">  
		<constructor-arg ref="dataSources"/>  
	</bean>
	
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>/WEB-INF/conf/hibernate.properties</value>
			</list>
		</property>
	</bean>

 
	<!-- 国际化的消息资源文件 -->
	<bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<!-- 在web环境中一定要定位到classpath 否则默认到当前web应用下找  -->
				<value>/WEB-INF/conf/messages</value>
			</list>
		</property>
		<property name="defaultEncoding" value="UTF-8"/>
		<property name="cacheSeconds" value="60"/>
	</bean>
	<!--
		<bean id="dataSource" class="org.logicalcobwebs.proxool.ProxoolDataSource" destroy-method="close">
			<property name="driverClass" value="oracle.jdbc.driver.OracleDriver"/>
			<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:orcl"/>
			<property name="user" value="smart"/>
			<property name="password" value="1"/>
		</bean>
		-->
	<!-- cacheManager工厂类 -->
	<!--<bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"
			p:configLocation="/WEB-INF/conf/ehcache.xml"
			p:shared="false" />
		<cache:annotation-driven cache-manager="cacheManager"/>-->
	<!-- 声明cacheManager -->
	<!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"
		p:cacheManager-ref="cacheManagerFactory"/>-->
	<bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource">     
			<ref bean="dataSources" />     
		</property> 
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.connection.autocommit">${hibernate.connection.autocommit}</prop>     
				<!--<prop key="hibernate.connection.release_mode">${hibernate.connection.release_mode}</prop>     
					<prop key="hibernate.proxool.existing_pool">${hibernate.proxool.existing_pool}</prop>
					<prop key="hibernate.proxool.pool_alias">${hibernate.proxool.pool_alias}</prop> 
					<prop key="hibernate.proxool.xml">${hibernate.proxool.xml}</prop>
					<prop key="hibernate.connection.provider_class">${hibernate.connection.provider_class}</prop>-->
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.cglib.use_reflection_optimizer">${hibernate.cglib.use_reflection_optimizer}</prop>
				<prop key="hibernate.temp.use_jdbc_metadata_defaults">${hibernate.temp.use_jdbc_metadata_defaults}</prop>  
				<prop key="hibernate.current_session_context_class">${hibernate.current_session_context_class}</prop>
				<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
				<prop key="jdbc.use_scrollable_resultset">${jdbc.use_scrollable_resultset}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.query.substitutions">${hibernate.query.substitutions}</prop>
				<prop key="hibernate.default_batch_fetch_size">${hibernate.default_batch_fetch_size}</prop>
				<prop key="hibernate.max_fetch_depth">${hibernate.max_fetch_depth}</prop>
				<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
				
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="net.sf.ehcache.config.ConfigurationFactory">${net.sf.ehcache.configurationResourceName}</prop>
				<prop key="hibernate.cache.use_structured_entries">${hibernate.cache.use_structured_entries}</prop>
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>cn.lv.bean</value>
			</list>
		</property>
	</bean>
	
	<bean id="txManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"/>
	</bean>
	
	<tx:advice id="txAdvice" transaction-manager="txManager">  
		<tx:attributes>  
			<tx:method name="save*" propagation="REQUIRED" />  
			<tx:method name="add*" propagation="REQUIRED" />  
			<tx:method name="create*" propagation="REQUIRED" />  
			<tx:method name="insert*" propagation="REQUIRED" />  
			<tx:method name="update*" propagation="REQUIRED" />  
			<tx:method name="merge*" propagation="REQUIRED" />  
			<tx:method name="del*" propagation="REQUIRED" />  
			<tx:method name="remove*" propagation="REQUIRED" />  
			<tx:method name="put*" propagation="REQUIRED" />  
			<tx:method name="use*" propagation="REQUIRED"/>  
			<!--hibernate4必须配置为开启事务 否则 getCurrentSession()获取不到-->  
			<tx:method name="get*" propagation="REQUIRED" read-only="true" />  
			<tx:method name="count*" propagation="REQUIRED" read-only="true" />  
			<tx:method name="find*" propagation="REQUIRED" read-only="true" />  
			<tx:method name="list*" propagation="REQUIRED" read-only="true" />  
			<tx:method name="*" read-only="true" />  
		</tx:attributes>  
	</tx:advice>  
	<aop:config expose-proxy="true">  
		<!-- 只对业务逻辑层实施事务 -->  
		<!--<aop:pointcut id="txPointcut" expression="execution(* cn.lv..service..*.*(..))" />  -->
		<aop:advisor pointcut="execution(* cn.lv.service..*.*(..))" advice-ref="txAdvice" />
		<aop:advisor pointcut="execution(* com.smart.service..*.*(..))" advice-ref="txAdvice" />
	</aop:config>  
	
	<!--异步线程执行器 -->
	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="10" />
		<property name="maxPoolSize" value="30" />
	</bean>
	
	
	<!-- 自动扫描组件，需要把controller去掉，否则影响事务管理 -->  
	<context:component-scan base-package="com.smart">  
		<context:exclude-filter type="regex" expression="com.smart.controller"/>  
	</context:component-scan>
	<!--需要实现注入的类所在的包 base-package指定扫描包的范围Spring递归的扫描该属性指定的包以及子包中的所有类并处理 -->
	<!-- 使用该标签 AutowiredAnnotationBeanPostProcessor容器隐湿的呗注册。因此 <context:annotation- config />配置就不需要了。-->
	
	<!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
			<property  name="prefix" value="/WEB-INF/views"/>
			<property  name="suffix"   value=".jsp"/>
		</bean>-->	
</beans>